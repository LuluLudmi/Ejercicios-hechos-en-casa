
drop database if exists CasaDeEmpanadas_v; 
create database CasaDeEmpanadas_v;
use CasaDeEmpanadas_v;
create table Venta (
    id_venta int primary key,
    fecha_venta datetime,
    id_tipo_empanada int,
    cantidad_vendida int,
    precio_facturacion_final double
 );
 
 
create table TipoEmpanada(
    id_tipo_empanada int primary key ,
    nombre varchar(45)not null,
    id_gusto int,
    descripcion varchar (150) not null
);

 insert into TipoEmpanada 
(id_tipo_empanada ,nombre ,id_gusto, descripcion)values
(1,'salteñas',1,'empanadas estilo salteñas'),
(2,'tucumanas',2,'empanadas estilo tucumanas'),
(3,'catamarqueñas',3,'empanadas estilo  catamarqueñas'),
(4,'jujeñas',4,'empanadas estilo jujeñas');

insert into Venta
(id_venta ,fecha_venta,id_tipo_empanada,cantidad_vendida ,precio_facturacion_final)values
(1,'2024/6/5',1,24,19200),
(2,'2024/6/5',1,48,38400),
(3,'2024/6/5',2,12,9600),
(4,'2024/6/5',2,16,12800),
(5,'2024/6/5',3,15,12000),
(6,'2024/6/5',3,24,19200),
(7,'2024/6/5',4,12,9600),
(8,'2024/6/5',4,48,38400);

ALTER TABLE Venta
ADD CONSTRAINT fk_tipo_empanada
FOREIGN KEY (id_tipo_empanada) REFERENCES TipoEmpanada(id_tipo_empanada);

-- 1 La consulta que puedes utilizar para obtener el `id_venta`, `precio_facturacion_final` y `nombre` de la empanada 
-- (ordenado alfabéticamente por el tipo de empanada) con una condición sobre la cantidad vendida 
-- (entre 10,000 y 20,000 unidades)  

SELECT Venta.id_venta, Venta.precio_facturacion_final, TipoEmpanada.nombre
FROM Venta
JOIN TipoEmpanada ON Venta.id_tipo_empanada = TipoEmpanada.id_tipo_empanada
WHERE Venta.cantidad_vendida BETWEEN 10 AND 20
ORDER BY TipoEmpanada.nombre;


-- 2 Listar todas las ventas junto con el nombre del tipo de empanada y la cantidad vendida
SELECT Venta.id_venta, Venta.precio_facturacion_final, TipoEmpanada.nombre, Venta.cantidad_vendida
FROM Venta
JOIN TipoEmpanada ON Venta.id_tipo_empanada = TipoEmpanada.id_tipo_empanada
ORDER BY TipoEmpanada.nombre;

-- Esta consulta devolverá todas las ventas y su información relacionada, mostrando el tipo de empanada y la cantidad vendida.

-- 3 Obtener el total de ventas por tipo de empanada
SELECT TipoEmpanada.nombre, SUM(Venta.cantidad_vendida) total_cantidad_vendida
FROM Venta
JOIN TipoEmpanada ON Venta.id_tipo_empanada = TipoEmpanada.id_tipo_empanada
GROUP BY TipoEmpanada.nombre
ORDER BY TipoEmpanada.nombre;

-- Tp 2
drop database if exists panaderia_v; 
create database panaderia_v;
use panaderia_v;
create table Venta (
    id_venta int primary key,
    fecha_venta datetime,
    id_postre int,
    cantidad_vendida int,
    precio_facturacion_final double
 );
 
 
create table Postre(
    id_postre int primary key ,
    nombre varchar(45)not null,
    descripcion varchar (180) not null,
    precio_unitario double
);

insert into Postre (id_postre,nombre,descripcion,precio_unitario) values
(1,'Pasta Frola','Torta con dulce de membrillo o batata',500),
(2,'Budin','Budin de pan',300),
(3,'Rosca de Pascua','Rosca gigante para pascuas',470),
(4,'Pan Dulce','Pan dulce con chips de chocolate',1200),
(5,'Torta','Torta para cumpleaños',4500);

insert into venta (id_venta,fecha_venta,id_postre,cantidad_vendida,precio_facturacion_final) values
(1,'2024/06/13 13:20:10',2,4,1200),
(2,'2024/06/14 13:40:18',3,2,940),
(3,'2024/06/15 12:10:25',5,3,13500),
(4,'2024/06/16 11:35:10',1,4,2000),
(5,'2024/06/17 09:37:28',2,1,300);
show tables;
ALTER TABLE Venta
ADD CONSTRAINT fk_postre
FOREIGN KEY (id_postre) REFERENCES Postre(id_postre);

-- El área administrativa de la panadería se encuentra en este momento contabilizando las ventas de los postres (pasta frola, budín, rosca de pascua, pan dulce, etc) . 

-- 1 La consulta debe listar los campos id_venta, precio_facturacion_final y el nombre del postre para las ventas que tengan un precio_facturacion_final 
-- entre 800 y 2000 pesos, ordenados alfabéticamente por el nombre del postre.

SELECT Venta.id_venta, Venta.precio_facturacion_final, Postre.nombre
FROM Venta
JOIN Postre ON Venta.id_postre = Postre.id_postre
WHERE Venta.precio_facturacion_final BETWEEN 800 AND 2000
ORDER BY Postre.nombre;

-- 2 Obtener el total de ventas por cada tipo de postre (sumando las cantidades y precios)
SELECT Postre.nombre, SUM(Venta.cantidad_vendida) total_cantidad_vendida
FROM Venta
JOIN Postre ON Venta.id_postre = Postre.id_postre
GROUP BY Postre.nombre
ORDER BY Postre.nombre;

-- 3 Obtener el postre con el precio de facturación promedio más alto

select max(precio_facturacion_final) promedio_facturacion
FROM Venta
JOIN Postre ON Venta.id_postre = Postre.id_postre
GROUP BY Postre.nombre
ORDER BY promedio_facturacion DESC
LIMIT 1;

SELECT Postre.nombre, AVG(Venta.precio_facturacion_final) AS promedio_facturacion
FROM Venta
JOIN Postre ON Venta.id_postre = Postre.id_postre
GROUP BY Postre.nombre
ORDER BY promedio_facturacion DESC
LIMIT 1;


