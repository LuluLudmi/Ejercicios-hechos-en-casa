A continuación, te doy una descripción detallada de las funciones y procedimientos del programa y hago algunos comentarios sobre su estructura y funcionamiento, especialmente sobre el uso de `while` y otros aspectos.

---

### **Función `main`**
```java
public static void main(String[] args) {
    Scanner teclado = new Scanner(System.in);

    // Leer el valor de entrada
    double valorEnBits = leerValorIngresado(teclado);

    // Mostrar el menú de opciones
    String[] opciones = {
        "1 - Bytes",
        "2 - Kilobytes",
        "3 - Megabytes",
        "4 - Gigabytes",
        "5 - Terabytes"
    };

    // Mostrar las opciones al usuario
    for (String opcion : opciones) {
        System.out.println(opcion);
    }

    int opcion = 0;

    // Usamos un bucle while para asegurar que el usuario elija una opción válida
    while (true) {
        // Leer la opción seleccionada
        System.out.print("Seleccione una unidad a convertir desde bits: ");
        opcion = teclado.nextInt();

        // Verificar si la opción es válida (1 a 5)
        if (opcion >= 1 && opcion <= 5) {
            break; // Salimos del bucle si la opción es válida
        } else {
            System.out.println("¡Error! Opción no válida. Por favor, elija una opción válida (1-5).");
        }
    }

    // Realizar la conversión
    convertirUnidades(valorEnBits, opcion);
}
```

**Comentarios sobre `main`:**
- **Objetivo:** La función `main` gestiona la ejecución del programa, solicitando al usuario el valor a convertir y las opciones de conversión. Posteriormente, realiza la conversión en base a la opción seleccionada.
- **Leer el valor de entrada:** Utiliza la función `leerValorIngresado(teclado)` para capturar el valor que el usuario desea convertir. Esto garantiza que el valor sea positivo.
- **Mostrar opciones:** Se crean las opciones de conversión en un arreglo de tipo `String[]` y se imprimen en consola para que el usuario pueda elegir a qué unidad desea convertir el valor en bits.
- **Validación de opción:** Se usa un bucle `while` que sigue pidiendo una opción válida (entre 1 y 5) hasta que el usuario ingrese una correcta. Esto asegura que el programa no intente convertir a una unidad que no existe.
- **Conversión:** Después de que el usuario selecciona una opción válida, se invoca la función `convertirUnidades` para realizar la conversión según la unidad seleccionada.

### **Función `leerValorIngresado`**
```java
public static double leerValorIngresado(Scanner teclado) {
    double valor = -1; // Inicializamos el valor a un número incorrecto para entrar al bucle
    while (valor < 0) {
        System.out.println("Bienvenido a su convertidor en línea.");
        System.out.println("Todas las conversiones parten de un valor en bits a diferentes unidades.");
        System.out.print("Por favor, ingrese un número natural (en bits): ");

        // Leemos el valor ingresado por el usuario
        valor = teclado.nextDouble();

        // Verificamos si el valor es válido (es decir, no negativo)
        if (valor < 0) {
            System.out.println("¡Error! El valor debe ser un número positivo.");
        }
    }
    return valor; // Retorna el valor
}
```

**Comentarios sobre `leerValorIngresado`:**
- **Objetivo:** Esta función se encarga de solicitar al usuario un valor positivo (en bits) para realizar las conversiones. Si el valor ingresado es negativo, el programa le pide al usuario que lo ingrese nuevamente.
- **Inicialización de `valor = -1`:** El valor se inicializa en `-1` para asegurar que el bucle `while` se ejecute al menos una vez. El bucle seguirá solicitando un número hasta que el valor ingresado sea mayor o igual a cero.
- **Validación:** Después de leer el valor ingresado, se verifica si el número es negativo. Si es negativo, se muestra un mensaje de error y se repite el proceso. Si el valor es válido, el bucle termina y se devuelve el valor ingresado.

### **Función `convertirUnidades`**
```java
public static void convertirUnidades(double valor, int unidad) {
    double valorConvertido = 0;
    String unidadConvertida = "";
    switch (unidad) {
        case 1:
            valorConvertido = valor / 8; // Bits a Bytes
            unidadConvertida = "Bytes";
            break;
        case 2:
            valorConvertido = valor / (8 * 1024); // Bits a Kilobytes
            unidadConvertida = "Kilobytes";
            break;
        case 3:
            valorConvertido = valor / (8 * 1024 * 1024); // Bits a Megabytes
            unidadConvertida = "Megabytes";
            break;
        case 4:
            valorConvertido = valor / (8 * 1024 * 1024 * 1024); // Bits a Gigabytes
            unidadConvertida = "Gigabytes";
            break;
        case 5:
            valorConvertido = valor / (8 * 1024 * 1024 * 1024 * 1024); // Bits a Terabytes
            unidadConvertida = "Terabytes";
            break;
    }

    // Usamos DecimalFormat para mostrar en notación científica con más decimales
    DecimalFormat df = new DecimalFormat("#.#########");

    // Mostrar el resultado en notación científica
    System.out.printf("El valor convertido es: %s %s\n", df.format(valorConvertido), unidadConvertida);
}
```

**Comentarios sobre `convertirUnidades`:**
- **Objetivo:** Esta función realiza la conversión entre bits y otras unidades como Bytes, Kilobytes, Megabytes, Gigabytes y Terabytes, según la opción seleccionada por el usuario.
- **Parámetros:** Recibe dos parámetros: `valor` (el valor en bits) y `unidad` (la unidad a la que se desea convertir, representada por un número entre 1 y 5).
- **Switch:** Se usa una estructura `switch` para determinar cuál unidad de conversión se debe aplicar, dependiendo del valor de `unidad`. 
    - Cada caso del `switch` realiza la conversión adecuada usando las constantes correspondientes para convertir de bits a la unidad solicitada (por ejemplo, de bits a Bytes se divide entre 8, de bits a Kilobytes se divide entre `8 * 1024`, etc.).
- **Formato de salida:** Después de realizar la conversión, se utiliza `DecimalFormat` para mostrar el resultado con precisión, limitando los decimales a un máximo de 9, lo que ayuda a representar de manera más clara los valores grandes como los Terabytes.
- **Mostrar el resultado:** Finalmente, se muestra el valor convertido junto con la unidad de destino.

---

### **Uso del bucle `while`**

El bucle `while` es fundamental en este programa para asegurar que el usuario ingrese valores válidos en dos ocasiones principales:

1. **En `leerValorIngresado`**: Asegura que el usuario ingrese un número positivo para la cantidad de bits. Si el valor es negativo, el programa vuelve a pedir el valor. El valor se inicializa en `-1` para garantizar que el bucle se ejecute la primera vez, ya que `valor < 0` es una condición que obliga a que el bucle continúe hasta que el usuario ingrese un valor válido.

2. **En `main`**: El bucle `while (true)` se utiliza para pedir al usuario una opción válida de conversión (entre 1 y 5). Si el usuario ingresa un número fuera de este rango, el bucle continuará hasta que se ingrese una opción válida. Esto garantiza que el programa no intente hacer una conversión con una opción inválida.

---

### Conclusión

El programa está bien estructurado, utilizando funciones para modularizar tareas y mantener un flujo claro. El uso de bucles `while` asegura que el usuario no pueda continuar hasta ingresar datos válidos (valor en bits y opción de conversión). El uso de `switch` en la conversión hace que la lógica sea simple y eficiente.

Espero que estos comentarios te ayuden a entender cómo funciona el programa y el propósito de cada parte del código. Si tienes alguna otra pregunta o duda, no dudes en preguntar.
